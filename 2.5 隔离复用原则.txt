到此为止，我们已经讲完了常见的几大设计原则。
首先是开闭选择喊了一句口号，我们要写好代码！然后是单一职责原则出来给出了解决方案：要写好代码必须让一个软件单元尽量只能包含一个变化因子；接着是依赖倒置原则，最少知道原则和接口隔离原则纷纷为单一职责原则撑腰（在前文中都有提到这三个原则都是单一职责原则的追随者）。除了里氏替换原则，所有的原则似乎都在实现同一个目标：一个软件单元应该只有一个变化因子，也就是我们常说的**隔离变化**。

在之前的几章中，笔者描述了这些设计原则很多是彼此包含的，而且即使是最核心的单一职责原则也是不完整的，因为软件设计并不仅仅只是**隔离变化**。如果可以重新定义的话，笔者认为软件设计的第一条准则是：

隔离复用原则（分治原则）：一个软件单元应该只有一个变化因子；一个变化因子只应该影响一个软件单元。

这个原则本身的名字并不重要，笔者想要表达的意思是，软件设计是一个分治的过程：先分后治，分是为了治，而治有时需要进一步分，就像金字塔一样自顶向下逐层分解。当然，我们也可以把这句话描述为：先拆解后复用，拆解是为了复用，而复用有时需要进一步的拆解。

从目前的软件设计理论而言，重心全在前半句，即**一个软件单元应该只有一个变化因子**；而对于后半句**一个变化因子只应该影响一个软件单元**却没有提及。本章笔者将对这一条原则，以及原则在日常代码中的落地手段进行全面的探讨。



### 1. 一个软件单元应该只有一个变化因子