### 1. 为什么需要软件设计
关于为什么做设计，无论是刚开始从事软件行业的新人，还是具有十余年编码经验的老手，给出的答案通常是：让代码变得更为优美，扩展性更好，更易于维护等等。

我们可以简单使用5Why追问法，来寻找软件设计的最终目的：

  - **为什么要做设计？**
    因为可以让代码扩展性更好，更易维护。
  - **为什么要让代码的扩展性更好，更易维护？**
    这样我们后续修改或增加需求需要改动的代码就很少。
  - **改动的代码很少对我们有什么好处？**
    代码改动少就可以节省很多工作量。
  - **为什么要节省工作量？**
    可以省时间。
  - **省时间有什么好处？**
    给公司省钱。


如果我们说软件设计的最终目的之一是为了给公司**省钱**，大概率不会有人提出反对意见。任何一件我们不厌其烦推崇的事情，如果深追其原因，往往都会归结于**价值**上面。但如果我们简单的将软件设计的本质定义为“省钱”，就很难区别出软件设计的特别之处，因为在软件的整个生命周期中，我们的很多行为或过程都是为了“钱”。诸如：

- 提高人员作战能力（激励，培训）;
- 更好的协同（管理，流程）;
- 节约软件的成本（可测试性，易用性，硬件成本，人力成本）;
- 营销（广告，良好的运营，销售策略）;
- 甚至一个HR通过自身的“忽悠”，用更少的薪酬招聘到一个更优秀的程序员，也可以为公司带来一笔可观的收入;

所以，为了更好的理解软件设计，我们需要把层次拔高一些，先搞清楚软件设计是如何省钱的。

### 2. 软件设计如何省钱

我们假定有两个完全相同的团队A和B（产品经理，项目经理，需求分析师，架构师，测试人员，开发人员，销售、运维和一线人员的能力和人数都完全相同）在完全相同的条件下（相同的时间，地点，硬件设施，软件设施等）开发一款相同的软件（相同的客户，相同的功能需求，时间要求，性能要求，部署要求，DFX需求等等），唯独只有他们负责软件设计的的架构师不一样。那么评判这两个架构师的好坏会变得格外简单，最终哪个团队赚的钱多，我们就可以说哪个软件设计师在这个项目中表现得更为出色，或者说叫**设计更好**。
> DFX：非功能性质量需求

我们知道：利润 = 销售额 - 成本。

其中软件设计肯定不会改变软件的销售额，因为我们已经假定项目背景，销售，产品等都是完全一样。所以，我们可以得出，软件设计影响的一定是**成本**，至于软件设计是如何影响成本，则需要更深入的探讨。

### 3. 效率还是工作量？
在假定了所有条件都一样的情况，直接影响成本的因素只有时间。只要缩短时间，整个软件开发过程中的人力成本和非人力成本都会等比降低。而：

**时间 = 工作量 / 开发效率**

那么软件设计影响的要么是开发效率，要么是工作量，或者两者都有所影响。

关于工作量的定义，我们先看下软件行业对工作量的评估方式：
目前业内工作量的评估方式有以下几种：**专家评估法（WBS）**，**类比类推法**和**参数法（FPA）**。

这些方法本质上都是对历史数据进行加工，然后对当前事务的工作量进行“估算”。
WBS依靠的历史数据是专家的个人历史数据，类比类推依赖于过去同类项目的数据，FPA依靠的是整个行业的历史经验数据。

可见，整个行业的工作量评估都没有专门考虑“软件设计”这个因素。不过这也是理所当然，我们不可能在估算工作量的时候去考查某个具体项目架构师的个人能力，只能大致认为这个项目的架构师水平与历史项目中的架构师水平相当，取一个平均值估算再为合理不过；就如我们并不能因为团队中有几个程序员大牛就将预估的工作量减少一样。

我个人并不反对这些评估工作量的方式，只是不得不承认：**软件开发所产生的工作量评估确实忽略了一个好的架构师所带来的正面影响，而且这个影响可能超过一个数量级**。

如果按照业内对工作量的评估方式，对于完全相同质量要求的产品而言最终两个团队的工作量应该是不会存在区别的。这很容易将我们导向一个误区：**软件设计影响的只能是效率**。

但实际并不如此。

笔者在刚毕业的时候待过一家外包公司，主要给甲方公司做一些web管理平台，功能无外乎一些配置数据的增删改查，也不涉及复杂的逻辑或算法，仅仅是一些业务相关的校验。由于很多项目都类似，所以公司的新项目都是直接拷贝旧项目的代码，并在这基础上进行修改。根据经验，新增一个页面从前端到后端大概3人天工作量，项目经理也一直都以这个数据作为工作量评估并进行人力规划。后来项目组A入职了一个技术大牛，对代码进行了重构（业务主要是数据库的CRUD，进行了一些模板化处理），把这个工作量从3人天缩减到了1人天。在这个优秀重构还没有推广到其他项目组前，项目组A的项目经理在评估工作量时已经变成1人天一个页面，而其他所有团队却还是3人天一个页面。

> 软件设计做得再差永远不会背锅：我们会奖励某人提升了多少效率，而会忘记其实效率本该如此。

<br>这个例子给人的第一感觉好像是：**新来的技术大牛把团队的开发效率提了三倍**。但实际上却是我们在评估工作量时由3人天改成了1人天，这分明是工作量减少了三倍。事实也确实如此：项目组A只是将大量的雷同代码抽象到了更高层，相同的一个页面代码量少了一半以上；尤其在维护阶段，新加一个数据库字段，以前要改十几个文件，而项目组A只需要改一处配置。而且后面实际统计出来也证明了这个结论：当时公司会每个月度统计开发人员的代码产出，项目组A的开发同学月产出代码并不比其他项目组的高。

如果深入思考一下，这个结果是必然的：两个团队的人员素质相近，业务复杂度也基本一样，使用相同的技术栈、开发工具、流程和平台，开发效率是不可能在短时间内拉开差距的。

很显然，好的设计并不会**提高效率**，它只是**减少了工作量**。再好的软件架构也不能让某个程序员顿悟，短时间内提高他的有效代码产出，它只是让程序员少写了很多代码。

一个有着糟糕设计的产品，在软件维护周期投入的工作量会尤为明显，仅仅修改一个bug或者新增一个很小的需求都会十分困难。
而有着良好设计的工程，在实现相同功能时需要投入的代码量可能差到一个数量级，这也正是软件设计的魅力所在，我们必须看清这个本质：

**软件设计改变的是工作量，而不是开发效率**。
> 笔者并不想说服所有人都认同这个结论，毕竟站在客户或者产品经理的角度看，最终的软件产品功能一样，他需要三天，你只需要一天，你的效率就是高一些。但作为软件专业人员，我们心里需要清楚，我们的开发效率并不会因为换了好的架构师就会有所提高，这只是相同的功能需求或修改所需要的工作量变少了而已。

### 4. 软件设计的度量

即使我们确定软件设计影响的就是工作量，我们依然很难衡量软件设计的好坏。

首先，工作量本身就非常难以衡量。软件开发的过程中除去分析和理解需求，程序员的核心工作是“写代码”和“读代码”。其中“写代码”的工作量我们可以通过代码行数进行相对评估，但是“读代码”的工作量却无法衡量。很多时候在软件的维护阶段，为了修改一两行代码，我们需要事先阅读大量的历史代码，尤其对于生命周期较长的软件而言，“读代码”的时间要比“写代码”所花费的时间多出数倍以上。

其次，即使我们准确计算出了工作量，发现它比我们预估的工作量相差甚远，但依然不能得出软件设计很糟糕或很优秀之类结论，因为我们没有可以对比的参照物，它还可能是下面的其他因素导致了这个结果：
- 最开始的工作量评估出现失误；
- 某个开发人员能力特别突出或特别糟糕；
- 前期大量硬编码，后期维护带来大量工作量；
- 需求变化过多；

要证明是由于软件设计特别优秀节约了大量成本，或软件设计太糟糕导致工作量巨大都非常艰难。我们必须保证在相同条件相同背景而且能力完全相同的团队下换一种设计方式重新来过，而且还必须一直等到软件的生命周期结束才可以证明架构师存在的价值。这是一件不可能完成的事情，实际工作中我们大都只能主观进行判断。

不得不提的是，目前已经出现了诸多衡量架构指数的工具。比如structure101和inFusion；很多头部大厂也有自己内部专门度量设计的工具。这些工具主要是通过计算函数的扇入扇出，类的引用次数，重复代码行数和频率等因子，最终得出一个量化值用于衡量架构的好坏。

笔者认为这些工具扫描出的设计缺陷是值得参考的，但如果用来衡量软件设计的好坏则不太合适，它们更多的是给代码在某种维度上定义了“美”和“丑”，然后通过这种定义好的标准来衡量代码是否“优美”，但“优美”代码并不一定工作量最小。举个例子，现在有一个**一锤子买卖**的项目，通过工具扫描代码的设计质量很差，耦合十分严重。我觉得这不见得是什么坏事，因为后期不再维护的项目，投入太多在可扩展性反而会成为浪费。这种时候，从结果看这种“差”反而是一种**好的设计**。

> 实际场景下，我们大部分的软件都是设计不足，生命周期也很长，需要长期维护，所以诸如inFusion之类的工具在大部分场景下对软件设计的评判仍然具有参考意义。

<br>笔者非常佩服那些第一个提出想法而且付诸实施的先行者。同样，对于那些尝试量化软件设计好坏的个人或公司笔者也持有敬佩之心，毕竟“不能量化”代表着很难改进。但是对于量化软件设计这件事情本身，笔者仍持悲观态度，美的软件设计更偏向于一种艺术，架构师需要在不断的演化中，从理想和现实中寻找一个最佳的平衡点，最终是好是坏只能主观评判。我们尝试通过一些数字来客观评判架构指数，就如“公式相声”的博士夫妻根据观众笑的音量和时长量化“开心指数”一样，听起来很科学，但实际却行不通。

> 笔者个人非常反对为了量化而量化的行为，有些领导唯数据论，而恰好程序员都有一千种方式来伪造任何数据。

我们在讲到什么是好的设计时，总会说没有最好的设计，只有合适不合适，又或者是用一些“恰到好处”，“刚刚好”之类的词语，这本质上正是软件设计无法量化所导致的无奈之言。这种“恰到好处”，**刚刚好**的说法纯属耍赖，包括提出这些词的人自己都不能讲清楚什么是**刚刚好**，这些模棱两可的词语并不能起到多少指导意义，反而只会让软件设计蒙上一层深不可测的哲学面纱。

笔者虽然没有更好的答案，但我知道，设计一定存在好坏之分（两种不同的设计导致的总人力成本一定不同），只是目前我们无法衡量，

**我们虽然无法找到一个绝对理想的圆，但这并不妨碍我们理解什么是圆。**